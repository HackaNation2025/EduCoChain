import { ethers } from "ethers";
import provider from "../config/provider";
import contratoABI from "../abi/contratoABI.json"; // Certifique-se de que esse arquivo cont√©m a ABI correta

// Endere√ßo do contrato na rede (BNB Testnet)
const contractAddress = "";
// Inst√¢ncia do contrato
const contract = new ethers.Contract(contractAddress, contratoABI, provider);

export default contract;

// Fun√ß√£o para criar uma nova inst√¢ncia do contrato
export function criarInstanciaContrato(address) {
  return new ethers.Contract(address, contratoABI, provider);
}

// Buscar empresa contratada
export async function getEmpresaContratada(contract) {
  try {
    const empresa = await contract.empresaContratada();
    console.log("üîé Empresa Contratada:", empresa);
    return empresa;
  } catch (error) {
    console.error("‚ùå Erro ao buscar empresa contratada:", error);
    return "Erro ao buscar dados";
  }
}

// Buscar √≥rg√£o do governo  
export async function getOrgaoGoverno(contract) {
  try {
    const governo = await contract.orgaoGoverno();
    console.log("üëë √ìrg√£o do Governo:", governo);
    return governo;
  } catch (error) {
    console.error("‚ùå Erro ao buscar √≥rg√£o do governo:", error);
    return "Erro ao buscar √≥rg√£o";
  }
}

// Buscar valor do contrato
export async function getValorContrato(contract) {
  try {
    const valor = await contract.valorTotalContrato();
    console.log("üí∞ Valor do Contrato (em Wei):", valor.toString());

    return valor.toString(); // Retorna o valor bruto como no terminal
  } catch (error) {
    console.error("‚ùå Erro ao buscar valor do contrato:", error);
    return "Erro ao buscar valor";
  }
}

// Buscar descri√ß√£o do servi√ßo
export async function getdescricaoProdutoServico(contract) {
  try {
    const descricao = await contract.descricaoProdutoServico();
    console.log("üìù Descri√ß√£o do Servi√ßo:", descricao);
    return descricao;
  } catch (error) {
    console.error("‚ùå Erro ao buscar descri√ß√£o do servi√ßo:", error);
    return "Erro ao buscar descri√ß√£o";
  }
}

// Buscar localiza√ß√£o da entrega
export async function getlocalizacaoEntrega(contract) {
  try {
    const localizacao = await contract.localizacaoEntrega();
    if (!localizacao || localizacao === "") {
      console.warn("‚ö†Ô∏è Localiza√ß√£o n√£o definida no contrato.");
      return ""; // Retorna uma string vazia ao inv√©s de uma mensagem de erro
    }
    console.log("üìç Localiza√ß√£o da Entrega:", localizacao);
    return localizacao;
  } catch (error) {
    console.error("‚ùå Falha ao obter localiza√ß√£o da entrega:", error);
    return ""; // Retorna uma string vazia, evitando mostrar erro ao usu√°rio
  }
}


// Buscar estado atual do contrato
export async function getEstadoAtual(contract) {
  try {
    const estado = await contract.estadoAtual();
    console.log("üìä Estado Atual do Contrato (Enum):", estado);

    // Mapeamento do enum para nomes leg√≠veis
    const estadosContrato = [
      "Aguardando Dep√≥sito",
      "Aguardando Notifica√ß√£o da Empresa",
      "Per√≠odo de Vota√ß√£o",
      "Vota√ß√£o Encerrada",
      "Pagamento √† Empresa Realizado",
      "Fundos Retornados ao Governo",
      "Disputa em Andamento"
    ];

    return estadosContrato[Number(estado)]; // Retorna o estado correspondente
  } catch (error) {
    console.error("‚ùå Erro ao buscar estado atual do contrato:", error);
    return "Erro ao buscar estado";
  }
}

// Buscar quantidade estipulada
export async function getQuantidadeEstipulada(contract) {
  try {
    const quantidade = await contract.quantidadeEstipulada();
    console.log("üì¶ Quantidade Estipulada:", quantidade.toString());
    return quantidade.toString();
  } catch (error) {
    console.error("‚ùå Erro ao buscar quantidade estipulada:", error);
    return "Erro ao buscar quantidade";
  }
}
